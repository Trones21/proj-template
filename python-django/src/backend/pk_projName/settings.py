"""
Django settings for pk_projName project.

Generated by 'django-admin startproject' using Django 3.2.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from os import environ
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/
DEPLOYMENT_TYPE = "DEVELOPMENT"

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = environ.get("DJANGO_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ["*"]


# Application definition

INSTALLED_APPS = [
    "drf_yasg",
    "rest_framework",
    "drf_generators",
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "mozilla_django_oidc",
    "django_filters",
    "django_extensions",
    "api",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "mozilla_django_oidc.middleware.SessionRefresh",
    "crum.CurrentRequestUserMiddleware",
    "pk_projName.middleware.RequestResponseLoggerMiddleware",
]

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
]

ROOT_URLCONF = "pk_projName.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


WSGI_APPLICATION = "pk_projName.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# PostgreSQL Database Configuration
DATABASE_CONFIGURATION = {
    "ENGINE": "django.db.backends.postgresql",
    "NAME": environ.get("DB_NAME"),
    "USER": environ.get("DB_USER"),
    "PASSWORD": environ.get("DB_PASS"),
    "HOST": environ.get("DB_HOST"),
    "PORT": environ.get("DB_PORT"),
}

DATABASES = {"default": DATABASE_CONFIGURATION}


# Determine storage solution
from enum import Enum


class StorageMode(Enum):
    LOCAL = "local"
    S3 = "s3"


def validate_storage_mode(mode):
    if mode not in StorageMode:
        raise ValueError(f"Invalid storage mode: {mode}")


STORAGE_MODE = StorageMode.LOCAL

validate_storage_mode(STORAGE_MODE)

# Keep the shape of this in case you move to S3 storage
OBJECT_STORAGE = {
    "endpoint": "s3.amazonaws.com",  # this is just s3.<region>.amazonaws.com (no bucket name)
    "top_level_bucket": "",
    "access_key": "",
    "secret_key": "",
    "secure": True,
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "api.Users"

# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_L10N = True
USE_TZ = True

STATIC_URL = "/static/"

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


CORS_ALLOW_CREDENTIALS = True
CORS_URLS_REGEX = r"^/api/.*$"  # restrict CORS to api path

USE_JWKS = os.getenv("USE_JWKS", "true").lower() == "true"

# OIDC - not really necessary now, but trying to make this as close to real world as possible
OIDC_OP_AUTHORIZATION_ENDPOINT = "https://example.com/auth"
OIDC_OP_TOKEN_ENDPOINT = "https://example.com/token"
OIDC_OP_USER_ENDPOINT = "https://example.com/userinfo"
OIDC_RP_CLIENT_ID = "your-client-id"
OIDC_RP_CLIENT_SECRET = "your-secret"

LOCAL_PUBLIC_KEY_PATH = "auth/keys/public_key.pem"

LOGIN_URL = "http://localhost:28080/auth"
LOGIN_REDIRECT_URL = "http://localhost:8000/api/"

USE_JWT_AUTH = False
